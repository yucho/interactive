window.Interactive=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){var r=n(9);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,".styles-module__reset___1LUVw {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.styles-module__container___1pszy {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  background: black;\n}\n\n.styles-module__scrollJack___1corV {\n  height: 100%;\n  overflow: hidden;\n}",""]),t.locals={reset:"styles-module__reset___1LUVw",container:"styles-module__container___1pszy styles-module__reset___1LUVw",scrollJack:"styles-module__scrollJack___1corV"}},function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function u(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,i,a,s;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=u(e))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return e}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):d(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return u(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var u=l.length,c=d(l,u);for(n=0;n<u;++n)i(c[n],this,t)}return!0},s.prototype.addListener=function(e,t){return c(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return c(this,e,t,!0)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,f(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,f(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,o,i,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},s.prototype.listenerCount=h,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){var r=n(7);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,u=0,c=[],f=n(8);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function d(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),d(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=l||(l=y(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(h(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var _,g=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){var r=n(10);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,".styles-module__reset___1LUVw{margin:0;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}.styles-module__container___1pszy{position:fixed;left:0;top:0;width:100vw;height:100vh;background:#000}.styles-module__scrollJack___1corV{height:100%;overflow:hidden}",""]),t.locals={reset:"styles-module__reset___1LUVw",container:"styles-module__container___1pszy styles-module__reset___1LUVw",scrollJack:"styles-module__scrollJack___1corV"}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(1)(!1)).i(n(2),""),t.push([e.i,".dom-elements-module__exit___11kKH{font-size:30px;padding:20px;color:hsla(0,0%,100%,.3);background:hsla(0,0%,100%,.3);-webkit-animation:dom-elements-module__popping___24ZEN 2s ease-in-out;animation:dom-elements-module__popping___24ZEN 2s ease-in-out;position:fixed;width:100px;height:100px;line-height:100px;top:-50px;right:-50px;border-radius:50%}.dom-elements-module__exit___11kKH:hover{font-size:32px;background:hsla(0,0%,100%,.4);cursor:pointer}@-webkit-keyframes dom-elements-module__popping___24ZEN{50%{width:400px;height:400px;line-height:400px;top:-200px;right:-200px;font-size:60px;padding:80px;color:hsla(0,0%,100%,.5);background:hsla(0,0%,100%,.5)}}@keyframes dom-elements-module__popping___24ZEN{50%{width:400px;height:400px;line-height:400px;top:-200px;right:-200px;font-size:60px;padding:80px;color:hsla(0,0%,100%,.5);background:hsla(0,0%,100%,.5)}}.dom-elements-module__tabContainer___3WFzI{list-style:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;position:fixed;height:200px;right:0;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.dom-elements-module__tab___1v65O,.dom-elements-module__tabContainer___3WFzI{width:50px}.dom-elements-module__tab___1v65O{height:50px;line-height:50px;text-align:center;font-size:40px;color:hsla(0,0%,100%,.2)}.dom-elements-module__active___3hejv{color:hsla(0,0%,100%,.4)}",""]),t.locals={exit:"dom-elements-module__exit___11kKH "+n(2).locals.reset,popping:"dom-elements-module__popping___24ZEN",tabContainer:"dom-elements-module__tabContainer___3WFzI "+n(2).locals.reset,tab:"dom-elements-module__tab___1v65O "+n(2).locals.reset,active:"dom-elements-module__active___3hejv"}},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,".slide-welcome-module__helvetica___3jyee{font-family:Helvetica Neue,Helvetica,Arial,sans-serif}.slide-welcome-module__welcome___T1KuD{top:50%;font-size:36px}.slide-welcome-module__next___25scy,.slide-welcome-module__welcome___T1KuD{position:absolute;margin:0 auto;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-weight:400;color:#eee;opacity:1}.slide-welcome-module__next___25scy{top:70%;font-size:20px}",""]),t.locals={helvetica:"slide-welcome-module__helvetica___3jyee",welcome:"slide-welcome-module__welcome___T1KuD slide-welcome-module__helvetica___3jyee",next:"slide-welcome-module__next___25scy slide-welcome-module__helvetica___3jyee"}},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n(4);function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=r.join(" ").split(" ");(t=e.classList).add.apply(t,i(a))};function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t.container,this.interactive=t,this.clearFlag=this.clearFlag.bind(this),this.addScrollControl(),this.addKeyControl()}var t,n,r;return t=e,(n=[{key:"clearFlag",value:function(){var e=this;clearTimeout(this.timeout),this.timeout=setTimeout(function(){return e.flag=!1},200)}},{key:"addScrollControl",value:function(){var e,t=this,n=0,r=function(r){if("wheel"===r.type)e=!0;else if(e)return;!t.flag&&Math.abs(r.deltaY)>5&&Math.abs(r.deltaY)>Math.abs(n)&&(r.deltaY>0?t.interactive.next():t.interactive.prev(),t.flag=!0,t.clearFlag()),n=r.deltaY};this.container.addEventListener("wheel",r),this.container.addEventListener("mousewheel",r),this.container.addEventListener("DOMMouseScroll",r)}},{key:"addKeyControl",value:function(){var e=this;document.addEventListener("keydown",function(t){t.isComposing||229===t.keyCode||e.flag||([8,33,38,46,87,104].includes(t.keyCode)?(e.interactive.prev(),e.flag=!0,e.clearFlag()):[13,34,40,83,98].includes(t.keyCode)&&(e.interactive.next(),e.flag=!0,e.clearFlag()))})}}])&&s(t.prototype,n),r&&s(t,r),e}(),u=n(0);function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.elements=[],this.slide=t,e.createNavigation(t.interactive),this.createNavigation(),this.addListenersToInteractive()}var t,n,r;return t=e,r=[{key:"createNavigation",value:function(t){if(!e.navigation){var n=document.createElement("div");n.innerHTML="×",a(n,u.exit),n.addEventListener("click",function(){t.pause()});var r=document.createElement("ul");a(r,u.tabContainer),e.navigation={exit:n,tabContainer:r},e.interactive=t,e.container=t.container,e.container.appendChild(n),e.container.appendChild(r)}}}],(n=[{key:"addListenersToInteractive",value:function(){var e=this;this.slide.on("enter",function(){e.elements.tab.classList.add(u.active)}),this.slide.on("exit",function(){e.elements.tab.classList.remove(u.active)})}},{key:"createNavigation",value:function(){var t=document.createElement("li");t.innerHTML="●",a(t,u.tab),this.elements.tab=t,e.navigation.tabContainer.appendChild(t)}}])&&c(t.prototype,n),r&&c(t,r),e}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(o=d(t).call(this))||"object"!==p(o)&&"function"!=typeof o?m(r):o).interactive=e,n.domElements=new f(m(n)),n.renderer=e.renderer,n.createScene(),n.createCamera(),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,r["EventEmitter"]),n=t,(o=[{key:"createScene",value:function(){this.scene=new THREE.Scene}},{key:"createCamera",value:function(){this.camera=new THREE.PerspectiveCamera(75,1,.1,1e3),this.camera.position.z=2}},{key:"render",value:function(e){this.animate&&this.animate(e),this.renderer.render(this.scene,this.camera)}},{key:"emitEnter",value:function(){this.emit("enter")}},{key:"emitExit",value:function(){this.emit("exit")}}])&&h(n.prototype,o),i&&h(n,i),t}();function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e,t,n){return(w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var O=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=g(this,E(t).call(this,e))).cloud=[],n.createCloud(),n.createLight(),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(t,v),n=t,(r=[{key:"createCamera",value:function(){w(E(t.prototype),"createCamera",this).call(this),this.camera.position.set(0,0,0),this.camera.lookAt(0,10,0)}},{key:"createCloud",value:function(){var e=this;(new THREE.TextureLoader).load("./smoke.png",function(t){var n=new THREE.PlaneBufferGeometry(300,300),r=new THREE.MeshLambertMaterial({map:t,transparent:!0}),o=new THREE.Mesh(n,r);o.position.set(0,100,0),o.lookAt(0,0,0),e.scene.add(o),e.cloud.push(o)})}},{key:"createLight",value:function(){var e=new THREE.AmbientLight(8947950,10);this.scene.add(e)}},{key:"animate",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.cloud[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){o.value.rotateZ(e/-5e4)}}catch(e){n=!0,r=e}finally{try{t||null==i.return||i.return()}finally{if(n)throw r}}}}])&&_(n.prototype,r),o&&_(n,o),t}(),T=n(6);function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var C=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=k(this,L(t).call(this,e))).createDomElements(),n.on("enter",n.onEnter),n.on("exit",n.onExit),n.createParticles(),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(t,v),n=t,(r=[{key:"createDomElements",value:function(){var e=document.createElement("h1");e.innerHTML="WELCOME",a(e,T.welcome);var t=document.createElement("h2");t.innerHTML="↓ scroll down to continue ↓",a(t,T.next),this.domElements.elements.push(e,t)}},{key:"onEnter",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.domElements.elements[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;f.container.appendChild(i)}}catch(e){t=!0,n=e}finally{try{e||null==o.return||o.return()}finally{if(t)throw n}}}},{key:"onExit",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.domElements.elements[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;f.container.removeChild(i)}}catch(e){t=!0,n=e}finally{try{e||null==o.return||o.return()}finally{if(t)throw n}}}},{key:"createParticles",value:function(){var e={pointTexture:{value:(new THREE.TextureLoader).load("./spark.png")}},t=new THREE.ShaderMaterial({uniforms:e,vertexShader:"\n      attribute float size;\n\t\t\tvarying vec3 vColor;\n\t\t\tvoid main() {\n\t\t\t\tvColor = color;\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\tgl_PointSize = size * ( 300.0 / -mvPosition.z );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t\t}\n      ",fragmentShader:"\n      uniform sampler2D pointTexture;\n\t\t\tvarying vec3 vColor;\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = vec4( vColor, 1.0 );\n\t\t\t\tgl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n\t\t\t}\n    ",blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0,vertexColors:!0});this.numParticles=1e5;for(var n=new THREE.BufferGeometry,r=[],o=[],i=[],a=new THREE.Color,s=0;s<this.numParticles;s++)r.push(200*(2*Math.random()-1)),r.push(200*(2*Math.random()-1)),r.push(200*(2*Math.random()-1)),a.setHSL(s/this.numParticles,1,.4),o.push(a.r,a.g,a.b),i.push(20);n.addAttribute("position",new THREE.Float32BufferAttribute(r,3)),n.addAttribute("color",new THREE.Float32BufferAttribute(o,3)),n.addAttribute("size",new THREE.Float32BufferAttribute(i,1).setDynamic(!0)),this.particles=new THREE.Points(n,t),this.geometry=n,this.scene.add(this.particles)}},{key:"animate",value:function(e){var t=.005*Date.now();this.particles.rotation.z=.01*t;for(var n=this.geometry.attributes.size.array,r=0;r<this.numParticles;r++)n[r]=10*(1+Math.sin(.1*r+t));this.geometry.attributes.size.needsUpdate=!0}}])&&j(n.prototype,r),o&&j(n,o),t}();function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(e,t,n){return t&&H(e.prototype,t),n&&H(e,n),e}function z(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e,t,n){return(F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var N=function(e){function t(e){var n,r,o;return M(this,t),r=this,(n=!(o=U(t).call(this,e))||"object"!==P(o)&&"function"!=typeof o?z(r):o).tornadoes=[new D(n.scene)],n.spawnTornado=n.spawnTornado.bind(z(n)),setTimeout(n.spawnTornado,300+1200*Math.random()),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(t,v),A(t,[{key:"createCamera",value:function(){F(U(t.prototype),"createCamera",this).call(this),this.camera.position.y=2,this.camera.lookAt(0,0,0)}},{key:"spawnTornado",value:function(){this.tornadoes.length<10&&this.tornadoes.push(new D(this.scene)),setTimeout(this.spawnTornado,300+1200*Math.random())}},{key:"animate",value:function(e){for(var t=this.tornadoes.length-1;t>=0;t--)this.tornadoes[t].move(e)&&(this.scene.remove(this.tornadoes[t].group),this.tornadoes.splice(t,1))}}]),t}(),D=function(){function e(t){M(this,e),this.scene=t,this.material=new THREE.MeshNormalMaterial,this.material.side=THREE.DoubleSide,this.group=new THREE.Group,this.group.position.set(4*Math.random()-2,0,4*Math.random()-2),this.scene.add(this.group),this.shards=[],this.wastedDelta=0,this.timeLived=0,this.generateShards(2)}return A(e,[{key:"generateShards",value:function(e){for(var t=0;t<e;t++){var n=new B(this.material);this.shards.push(n),this.group.add(n.mesh)}}},{key:"move",value:function(e){if(this.timeLived<4e3){var t=e/16+this.wastedDelta,n=Math.floor(t);this.wastedDelta=t-n,this.generateShards(n)}this.timeLived+=e;for(var r=this.shards.length-1;r>=0;r--)this.shards[r].move(e)&&(this.group.remove(this.shards[r].mesh),this.shards.splice(r,1));if(!this.shards.length)return!0}}]),e}(),B=function(){function e(t){M(this,e),this.life=3e3+2e3*Math.random(),this.spin=500+200*Math.random(),this.geometry=new THREE.Geometry,this.geometry.vertices=[new THREE.Vector3(-.05*Math.random(),.05,0),new THREE.Vector3(.05*Math.random(),-.05,0),new THREE.Vector3(0,.05*Math.random()-.02,0)],this.geometry.faces=[new THREE.Face3(0,1,2)],this.geometry.computeFaceNormals(),this.mesh=new THREE.Mesh(this.geometry,t)}return A(e,[{key:"move",value:function(e){if(this.life-=e,this.life<0)return!0;this.mesh.rotation.x+=e/this.spin,this.mesh.rotation.y+=e/this.spin,this.mesh.rotation.z+=e/this.spin;var t=this.mesh.position.y+e/2e3;this.mesh.position.y=t,this.mesh.position.x=.2*Math.sqrt(t)*Math.sin(this.life/300),this.mesh.position.z=.2*Math.sqrt(t)*Math.cos(this.life/300)}}]),e}(),V=N;function G(e){return(G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function K(e,t){return!t||"object"!==G(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e,t,n){return(W="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Y(e,t){return(Y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Z=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=K(this,q(t).call(this,e))).createText(),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Y(e,t)}(t,v),n=t,(r=[{key:"createCamera",value:function(){W(q(t.prototype),"createCamera",this).call(this),this.camera.position.set(-50,30,0),this.camera.lookAt(0,0,-100)}},{key:"createText",value:function(){var e=this;this.scene.background=new THREE.Color(15790320),(new THREE.FontLoader).load("helvetiker_regular.typeface.json",function(t){var n,r,o=new THREE.LineBasicMaterial({color:26265,side:THREE.DoubleSide}),i=new THREE.MeshBasicMaterial({color:26265,transparent:!0,opacity:.4,side:THREE.DoubleSide}),a=t.generateShapes("Thanks for Playing",10),s=new THREE.ShapeBufferGeometry(a);s.computeBoundingBox(),n=-.5*(s.boundingBox.max.x-s.boundingBox.min.x),s.translate(n,0,0),(r=new THREE.Mesh(s,i)).position.z=-100,e.scene.add(r);for(var l=[],u=0;u<a.length;u++){var c=a[u];if(c.holes&&c.holes.length>0)for(var f=0;f<c.holes.length;f++){var p=c.holes[f];l.push(p)}}a.push.apply(a,l);for(var h=new THREE.Object3D,d=0;d<a.length;d++){var m=a[d].getPoints(),y=(new THREE.BufferGeometry).setFromPoints(m);y.translate(n,0,0);var v=new THREE.Line(y,o);h.add(v)}e.scene.add(h)})}},{key:"animate",value:function(e){var t=5e-4*Date.now();this.camera.position.set(20*Math.sin(t)-50,30+-40*Math.cos(.2*t),0),this.camera.lookAt(0,0,-100)}}])&&J(n.prototype,r),o&&J(n,o),t}();function $(e){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ee(e){return(ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function te(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"default",function(){return re});var re=function(e){function t(){var e,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(e=!(r=ee(t).call(this))||"object"!==$(r)&&"function"!=typeof r?te(n):r).initializeWebGLRenderer(),e.initializeSlides(),e.controller=new l(te(e)),e.currentSlideIndex=0,e.render=e.render.bind(te(e)),e}var n,i,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(t,r["EventEmitter"]),n=t,(i=[{key:"play",value:function(){this.emit("play"),document.body.appendChild(this.container),this.playing=!0,this.currentSlide.emitEnter(),ie(),this.render()}},{key:"pause",value:function(){this.playing=!1,this.currentSlide.prevTimestamp=null,this.emit("pause"),document.body.contains(this.container)&&document.body.removeChild(this.container),ae(),this.currentSlide.emitExit()}},{key:"initializeWebGLRenderer",value:function(){this.container=document.createElement("div"),a(this.container,o.container),this.renderer=new THREE.WebGLRenderer,this.renderer.setPixelRatio(devicePixelRatio),this.container.appendChild(this.renderer.domElement)}},{key:"initializeSlides",value:function(){this.slides=[],this.slides.push(new C(this)),this.slides.push(new O(this)),this.slides.push(new V(this)),this.slides.push(new Z(this))}},{key:"render",value:function(e){if(this.playing&&requestAnimationFrame(this.render),e){this.renderer.clear();var t=Q(this.currentViewport,4),n=t[2],r=t[3];this.renderer.setSize(n,r),this.currentSlide.prevTimestamp||(this.currentSlide.prevTimestamp=e);var o=e-this.currentSlide.prevTimestamp;this.currentSlide.render(o),this.currentSlide.prevTimestamp=e}}},{key:"next",value:function(){this.currentSlideIndex<this.slides.length-1&&(this.currentSlide.emitExit(),this.currentSlideIndex+=1,this.currentSlide.emitEnter(),this.emit("next"))}},{key:"prev",value:function(){this.currentSlideIndex>0&&(this.currentSlide.emitExit(),this.currentSlideIndex-=1,this.currentSlide.emitEnter(),this.emit("prev"))}},{key:"currentViewport",get:function(){return[0,0,this.container.clientWidth,this.container.clientHeight]}},{key:"currentSlide",get:function(){return this.slides[this.currentSlideIndex]}}])&&X(n.prototype,i),s&&X(n,s),t}(),oe=function(e){return e.preventDefault()},ie=function(){document.body.classList.add(o.scrollJack),document.body.addEventListener("touchmove",oe)},ae=function(){document.body.classList.remove(o.scrollJack),document.body.removeEventListener("touchmove",oe)}}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,